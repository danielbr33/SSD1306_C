
SSD1306_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014e0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001674  08001674  00011674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080016ac  080016ac  000116ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080016b0  080016b0  000116b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080016b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          0000048c  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000498  20000498  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_line   000056a5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0000cd64  00000000  00000000  000256e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001905  00000000  00000000  00032445  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000005c8  00000000  00000000  00033d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000005a0  00000000  00000000  00034318  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001af93  00000000  00000000  000348b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0009f71b  00000000  00000000  0004f84b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000eef66  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000e60  00000000  00000000  000eefe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00003272  00000000  00000000  000efe44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800165c 	.word	0x0800165c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800165c 	.word	0x0800165c

080001d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800020c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001da:	e003      	b.n	80001e4 <LoopCopyDataInit>

080001dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001dc:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001e2:	3104      	adds	r1, #4

080001e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001e4:	480b      	ldr	r0, [pc, #44]	; (8000214 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001e6:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <LoopForever+0xe>)
	adds	r2, r0, r1
 80001e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001ec:	d3f6      	bcc.n	80001dc <CopyDataInit>
	ldr	r2, =_sbss
 80001ee:	4a0b      	ldr	r2, [pc, #44]	; (800021c <LoopForever+0x12>)
	b	LoopFillZerobss
 80001f0:	e002      	b.n	80001f8 <LoopFillZerobss>

080001f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001f4:	f842 3b04 	str.w	r3, [r2], #4

080001f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80001f8:	4b09      	ldr	r3, [pc, #36]	; (8000220 <LoopForever+0x16>)
	cmp	r2, r3
 80001fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80001fc:	d3f9      	bcc.n	80001f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001fe:	f000 fa0f 	bl	8000620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000202:	f001 f9ff 	bl	8001604 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000206:	f000 f8a2 	bl	800034e <main>

0800020a <LoopForever>:

LoopForever:
    b LoopForever
 800020a:	e7fe      	b.n	800020a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800020c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000210:	080016b4 	.word	0x080016b4
	ldr	r0, =_sdata
 8000214:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000218:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800021c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000220:	20000498 	.word	0x20000498

08000224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000224:	e7fe      	b.n	8000224 <ADC1_2_IRQHandler>
	...

08000228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022c:	2400      	movs	r4, #0
 800022e:	9403      	str	r4, [sp, #12]
 8000230:	9404      	str	r4, [sp, #16]
 8000232:	9405      	str	r4, [sp, #20]
 8000234:	9406      	str	r4, [sp, #24]
 8000236:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000238:	4b1c      	ldr	r3, [pc, #112]	; (80002ac <MX_GPIO_Init+0x84>)
 800023a:	695a      	ldr	r2, [r3, #20]
 800023c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000240:	615a      	str	r2, [r3, #20]
 8000242:	695a      	ldr	r2, [r3, #20]
 8000244:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000248:	9201      	str	r2, [sp, #4]
 800024a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800024c:	695a      	ldr	r2, [r3, #20]
 800024e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000252:	615a      	str	r2, [r3, #20]
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800025a:	9302      	str	r3, [sp, #8]
 800025c:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_CS_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 800025e:	4e14      	ldr	r6, [pc, #80]	; (80002b0 <MX_GPIO_Init+0x88>)
 8000260:	4622      	mov	r2, r4
 8000262:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000266:	4630      	mov	r0, r6
 8000268:	f000 fb9e 	bl	80009a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 800026c:	4622      	mov	r2, r4
 800026e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000276:	f000 fb97 	bl	80009a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_CS_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin|OLED_DC_Pin;
 800027a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800027e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000280:	2501      	movs	r5, #1
 8000282:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000284:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000286:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000288:	a903      	add	r1, sp, #12
 800028a:	4630      	mov	r0, r6
 800028c:	f000 fab2 	bl	80007f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_RESET_Pin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin;
 8000290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000294:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000296:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000298:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 800029c:	a903      	add	r1, sp, #12
 800029e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a2:	f000 faa7 	bl	80007f4 <HAL_GPIO_Init>

}
 80002a6:	b008      	add	sp, #32
 80002a8:	bd70      	pop	{r4, r5, r6, pc}
 80002aa:	bf00      	nop
 80002ac:	40021000 	.word	0x40021000
 80002b0:	48000400 	.word	0x48000400

080002b4 <MX_SPI2_Init>:
{
 80002b4:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 80002b6:	480f      	ldr	r0, [pc, #60]	; (80002f4 <MX_SPI2_Init+0x40>)
 80002b8:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <MX_SPI2_Init+0x44>)
 80002ba:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80002bc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80002c0:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80002c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002c6:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80002c8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80002cc:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002ce:	2300      	movs	r3, #0
 80002d0:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002d2:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80002d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002d8:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002da:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002dc:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80002de:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002e0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80002e2:	2207      	movs	r2, #7
 80002e4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80002e6:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80002e8:	2308      	movs	r3, #8
 80002ea:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80002ec:	f001 f847 	bl	800137e <HAL_SPI_Init>
 80002f0:	bd08      	pop	{r3, pc}
 80002f2:	bf00      	nop
 80002f4:	20000430 	.word	0x20000430
 80002f8:	40003800 	.word	0x40003800

080002fc <SystemClock_Config>:
{
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000300:	2228      	movs	r2, #40	; 0x28
 8000302:	2100      	movs	r1, #0
 8000304:	a806      	add	r0, sp, #24
 8000306:	f001 f9a1 	bl	800164c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030a:	2400      	movs	r4, #0
 800030c:	9401      	str	r4, [sp, #4]
 800030e:	9402      	str	r4, [sp, #8]
 8000310:	9403      	str	r4, [sp, #12]
 8000312:	9404      	str	r4, [sp, #16]
 8000314:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000316:	2502      	movs	r5, #2
 8000318:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031a:	2301      	movs	r3, #1
 800031c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031e:	2310      	movs	r3, #16
 8000320:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000322:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000328:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032a:	a806      	add	r0, sp, #24
 800032c:	f000 fb42 	bl	80009b4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000330:	230f      	movs	r3, #15
 8000332:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000336:	2380      	movs	r3, #128	; 0x80
 8000338:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800033a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000340:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000342:	4621      	mov	r1, r4
 8000344:	a801      	add	r0, sp, #4
 8000346:	f000 fe7b 	bl	8001040 <HAL_RCC_ClockConfig>
}
 800034a:	b011      	add	sp, #68	; 0x44
 800034c:	bd30      	pop	{r4, r5, pc}

0800034e <main>:
{
 800034e:	b508      	push	{r3, lr}
  HAL_Init();
 8000350:	f000 f9be 	bl	80006d0 <HAL_Init>
  SystemClock_Config();
 8000354:	f7ff ffd2 	bl	80002fc <SystemClock_Config>
  MX_GPIO_Init();
 8000358:	f7ff ff66 	bl	8000228 <MX_GPIO_Init>
  MX_SPI2_Init();
 800035c:	f7ff ffaa 	bl	80002b4 <MX_SPI2_Init>
  ssd1306_Init();
 8000360:	f000 f898 	bl	8000494 <ssd1306_Init>
  ssd1306_Fill(White);
 8000364:	2001      	movs	r0, #1
 8000366:	f000 f869 	bl	800043c <ssd1306_Fill>
  ssd1306_UpdateScreen();
 800036a:	f000 f877 	bl	800045c <ssd1306_UpdateScreen>
 800036e:	e7fe      	b.n	800036e <main+0x20>

08000370 <ssd1306_Reset>:
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8000370:	b508      	push	{r3, lr}
	// CS = High (not selected)
	HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8000372:	2201      	movs	r2, #1
 8000374:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000378:	480b      	ldr	r0, [pc, #44]	; (80003a8 <ssd1306_Reset+0x38>)
 800037a:	f000 fb15 	bl	80009a8 <HAL_GPIO_WritePin>

	// Reset the OLED
	HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000388:	f000 fb0e 	bl	80009a8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800038c:	200a      	movs	r0, #10
 800038e:	f000 f9c3 	bl	8000718 <HAL_Delay>
	HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8000392:	2201      	movs	r2, #1
 8000394:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039c:	f000 fb04 	bl	80009a8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80003a0:	200a      	movs	r0, #10
 80003a2:	f000 f9b9 	bl	8000718 <HAL_Delay>
 80003a6:	bd08      	pop	{r3, pc}
 80003a8:	48000400 	.word	0x48000400

080003ac <ssd1306_WriteCommand>:
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	b083      	sub	sp, #12
 80003b0:	ad02      	add	r5, sp, #8
 80003b2:	f805 0d01 	strb.w	r0, [r5, #-1]!
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80003b6:	4c0e      	ldr	r4, [pc, #56]	; (80003f0 <ssd1306_WriteCommand+0x44>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003be:	4620      	mov	r0, r4
 80003c0:	f000 faf2 	bl	80009a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 80003c4:	2200      	movs	r2, #0
 80003c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ca:	4620      	mov	r0, r4
 80003cc:	f000 faec 	bl	80009a8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 80003d0:	f04f 33ff 	mov.w	r3, #4294967295
 80003d4:	2201      	movs	r2, #1
 80003d6:	4629      	mov	r1, r5
 80003d8:	4806      	ldr	r0, [pc, #24]	; (80003f4 <ssd1306_WriteCommand+0x48>)
 80003da:	f001 f82d 	bl	8001438 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80003de:	2201      	movs	r2, #1
 80003e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003e4:	4620      	mov	r0, r4
 80003e6:	f000 fadf 	bl	80009a8 <HAL_GPIO_WritePin>
}
 80003ea:	b003      	add	sp, #12
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	bf00      	nop
 80003f0:	48000400 	.word	0x48000400
 80003f4:	20000430 	.word	0x20000430

080003f8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80003f8:	b570      	push	{r4, r5, r6, lr}
 80003fa:	4605      	mov	r5, r0
 80003fc:	460e      	mov	r6, r1
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80003fe:	4c0d      	ldr	r4, [pc, #52]	; (8000434 <ssd1306_WriteData+0x3c>)
 8000400:	2200      	movs	r2, #0
 8000402:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000406:	4620      	mov	r0, r4
 8000408:	f000 face 	bl	80009a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 800040c:	2201      	movs	r2, #1
 800040e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000412:	4620      	mov	r0, r4
 8000414:	f000 fac8 	bl	80009a8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8000418:	f04f 33ff 	mov.w	r3, #4294967295
 800041c:	b2b2      	uxth	r2, r6
 800041e:	4629      	mov	r1, r5
 8000420:	4805      	ldr	r0, [pc, #20]	; (8000438 <ssd1306_WriteData+0x40>)
 8000422:	f001 f809 	bl	8001438 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8000426:	2201      	movs	r2, #1
 8000428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800042c:	4620      	mov	r0, r4
 800042e:	f000 fabb 	bl	80009a8 <HAL_GPIO_WritePin>
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	48000400 	.word	0x48000400
 8000438:	20000430 	.word	0x20000430

0800043c <ssd1306_Fill>:
// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800043c:	2300      	movs	r3, #0
 800043e:	e003      	b.n	8000448 <ssd1306_Fill+0xc>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000440:	21ff      	movs	r1, #255	; 0xff
 8000442:	4a05      	ldr	r2, [pc, #20]	; (8000458 <ssd1306_Fill+0x1c>)
 8000444:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000446:	3301      	adds	r3, #1
 8000448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800044c:	d203      	bcs.n	8000456 <ssd1306_Fill+0x1a>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800044e:	2800      	cmp	r0, #0
 8000450:	d1f6      	bne.n	8000440 <ssd1306_Fill+0x4>
 8000452:	2100      	movs	r1, #0
 8000454:	e7f5      	b.n	8000442 <ssd1306_Fill+0x6>
    }
}
 8000456:	4770      	bx	lr
 8000458:	20000028 	.word	0x20000028

0800045c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800045c:	b510      	push	{r4, lr}
    uint8_t i;
    for(i = 0; i < 8; i++) {
 800045e:	2400      	movs	r4, #0
 8000460:	e012      	b.n	8000488 <ssd1306_UpdateScreen+0x2c>
        ssd1306_WriteCommand(0xB0 + i);
 8000462:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8000466:	b2c0      	uxtb	r0, r0
 8000468:	f7ff ffa0 	bl	80003ac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800046c:	2000      	movs	r0, #0
 800046e:	f7ff ff9d 	bl	80003ac <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000472:	2010      	movs	r0, #16
 8000474:	f7ff ff9a 	bl	80003ac <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	4805      	ldr	r0, [pc, #20]	; (8000490 <ssd1306_UpdateScreen+0x34>)
 800047c:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
 8000480:	f7ff ffba 	bl	80003f8 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8000484:	3401      	adds	r4, #1
 8000486:	b2e4      	uxtb	r4, r4
 8000488:	2c07      	cmp	r4, #7
 800048a:	d9ea      	bls.n	8000462 <ssd1306_UpdateScreen+0x6>
    }
}
 800048c:	bd10      	pop	{r4, pc}
 800048e:	bf00      	nop
 8000490:	20000028 	.word	0x20000028

08000494 <ssd1306_Init>:
void ssd1306_Init(void) {
 8000494:	b508      	push	{r3, lr}
	ssd1306_Reset();
 8000496:	f7ff ff6b 	bl	8000370 <ssd1306_Reset>
    HAL_Delay(100);
 800049a:	2064      	movs	r0, #100	; 0x64
 800049c:	f000 f93c 	bl	8000718 <HAL_Delay>
    ssd1306_WriteCommand(0xAE); //display off
 80004a0:	20ae      	movs	r0, #174	; 0xae
 80004a2:	f7ff ff83 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80004a6:	2020      	movs	r0, #32
 80004a8:	f7ff ff80 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80004ac:	2000      	movs	r0, #0
 80004ae:	f7ff ff7d 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80004b2:	20b0      	movs	r0, #176	; 0xb0
 80004b4:	f7ff ff7a 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80004b8:	20c8      	movs	r0, #200	; 0xc8
 80004ba:	f7ff ff77 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 80004be:	2000      	movs	r0, #0
 80004c0:	f7ff ff74 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80004c4:	2010      	movs	r0, #16
 80004c6:	f7ff ff71 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80004ca:	2040      	movs	r0, #64	; 0x40
 80004cc:	f7ff ff6e 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 80004d0:	2081      	movs	r0, #129	; 0x81
 80004d2:	f7ff ff6b 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 80004d6:	20ff      	movs	r0, #255	; 0xff
 80004d8:	f7ff ff68 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80004dc:	20a1      	movs	r0, #161	; 0xa1
 80004de:	f7ff ff65 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 80004e2:	20a6      	movs	r0, #166	; 0xa6
 80004e4:	f7ff ff62 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80004e8:	20a8      	movs	r0, #168	; 0xa8
 80004ea:	f7ff ff5f 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 80004ee:	203f      	movs	r0, #63	; 0x3f
 80004f0:	f7ff ff5c 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80004f4:	20a4      	movs	r0, #164	; 0xa4
 80004f6:	f7ff ff59 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80004fa:	20d3      	movs	r0, #211	; 0xd3
 80004fc:	f7ff ff56 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000500:	2000      	movs	r0, #0
 8000502:	f7ff ff53 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000506:	20d5      	movs	r0, #213	; 0xd5
 8000508:	f7ff ff50 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800050c:	20f0      	movs	r0, #240	; 0xf0
 800050e:	f7ff ff4d 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000512:	20d9      	movs	r0, #217	; 0xd9
 8000514:	f7ff ff4a 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000518:	2022      	movs	r0, #34	; 0x22
 800051a:	f7ff ff47 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800051e:	20da      	movs	r0, #218	; 0xda
 8000520:	f7ff ff44 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8000524:	2012      	movs	r0, #18
 8000526:	f7ff ff41 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 800052a:	20db      	movs	r0, #219	; 0xdb
 800052c:	f7ff ff3e 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000530:	2020      	movs	r0, #32
 8000532:	f7ff ff3b 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000536:	208d      	movs	r0, #141	; 0x8d
 8000538:	f7ff ff38 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800053c:	2014      	movs	r0, #20
 800053e:	f7ff ff35 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000542:	20af      	movs	r0, #175	; 0xaf
 8000544:	f7ff ff32 	bl	80003ac <ssd1306_WriteCommand>
    ssd1306_Fill(Black);
 8000548:	2000      	movs	r0, #0
 800054a:	f7ff ff77 	bl	800043c <ssd1306_Fill>
    ssd1306_UpdateScreen();
 800054e:	f7ff ff85 	bl	800045c <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8000552:	4b05      	ldr	r3, [pc, #20]	; (8000568 <ssd1306_Init+0xd4>)
 8000554:	2200      	movs	r2, #0
 8000556:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
    SSD1306.CurrentY = 0;
 800055a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
    SSD1306.Initialized = 1;
 800055e:	2201      	movs	r2, #1
 8000560:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 8000564:	bd08      	pop	{r3, pc}
 8000566:	bf00      	nop
 8000568:	20000028 	.word	0x20000028

0800056c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800056c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <HAL_MspInit+0x2c>)
 8000570:	699a      	ldr	r2, [r3, #24]
 8000572:	f042 0201 	orr.w	r2, r2, #1
 8000576:	619a      	str	r2, [r3, #24]
 8000578:	699a      	ldr	r2, [r3, #24]
 800057a:	f002 0201 	and.w	r2, r2, #1
 800057e:	9200      	str	r2, [sp, #0]
 8000580:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	69da      	ldr	r2, [r3, #28]
 8000584:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000588:	61da      	str	r2, [r3, #28]
 800058a:	69db      	ldr	r3, [r3, #28]
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000594:	b002      	add	sp, #8
 8000596:	4770      	bx	lr
 8000598:	40021000 	.word	0x40021000

0800059c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800059c:	b500      	push	{lr}
 800059e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	2300      	movs	r3, #0
 80005a2:	9303      	str	r3, [sp, #12]
 80005a4:	9304      	str	r3, [sp, #16]
 80005a6:	9305      	str	r3, [sp, #20]
 80005a8:	9306      	str	r3, [sp, #24]
 80005aa:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 80005ac:	6802      	ldr	r2, [r0, #0]
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <HAL_SPI_MspInit+0x64>)
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d002      	beq.n	80005ba <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80005b4:	b009      	add	sp, #36	; 0x24
 80005b6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI2_CLK_ENABLE();
 80005ba:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 80005be:	69da      	ldr	r2, [r3, #28]
 80005c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80005c4:	61da      	str	r2, [r3, #28]
 80005c6:	69da      	ldr	r2, [r3, #28]
 80005c8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80005cc:	9201      	str	r2, [sp, #4]
 80005ce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d0:	695a      	ldr	r2, [r3, #20]
 80005d2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80005d6:	615a      	str	r2, [r3, #20]
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005de:	9302      	str	r3, [sp, #8]
 80005e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = OLED_CLK_Pin|OLED_MOSI_Pin;
 80005e2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80005e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e8:	2302      	movs	r3, #2
 80005ea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ec:	2303      	movs	r3, #3
 80005ee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005f0:	2305      	movs	r3, #5
 80005f2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f4:	a903      	add	r1, sp, #12
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <HAL_SPI_MspInit+0x68>)
 80005f8:	f000 f8fc 	bl	80007f4 <HAL_GPIO_Init>
}
 80005fc:	e7da      	b.n	80005b4 <HAL_SPI_MspInit+0x18>
 80005fe:	bf00      	nop
 8000600:	40003800 	.word	0x40003800
 8000604:	48000400 	.word	0x48000400

08000608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000608:	4770      	bx	lr

0800060a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060a:	e7fe      	b.n	800060a <HardFault_Handler>

0800060c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800060c:	e7fe      	b.n	800060c <MemManage_Handler>

0800060e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060e:	e7fe      	b.n	800060e <BusFault_Handler>

08000610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000610:	e7fe      	b.n	8000610 <UsageFault_Handler>

08000612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000612:	4770      	bx	lr

08000614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000614:	4770      	bx	lr

08000616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000616:	4770      	bx	lr

08000618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000618:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061a:	f000 f86b 	bl	80006f4 <HAL_IncTick>
 800061e:	bd08      	pop	{r3, pc}

08000620 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000620:	4915      	ldr	r1, [pc, #84]	; (8000678 <SystemInit+0x58>)
 8000622:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000626:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800062a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <SystemInit+0x5c>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	f042 0201 	orr.w	r2, r2, #1
 8000636:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000638:	6858      	ldr	r0, [r3, #4]
 800063a:	4a11      	ldr	r2, [pc, #68]	; (8000680 <SystemInit+0x60>)
 800063c:	4002      	ands	r2, r0
 800063e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000646:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800064a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000652:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000654:	685a      	ldr	r2, [r3, #4]
 8000656:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800065a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800065c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800065e:	f022 020f 	bic.w	r2, r2, #15
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000664:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000666:	4a07      	ldr	r2, [pc, #28]	; (8000684 <SystemInit+0x64>)
 8000668:	4002      	ands	r2, r0
 800066a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000670:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000674:	608b      	str	r3, [r1, #8]
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00
 800067c:	40021000 	.word	0x40021000
 8000680:	f87fc00c 	.word	0xf87fc00c
 8000684:	ff00fccc 	.word	0xff00fccc

08000688 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000688:	b510      	push	{r4, lr}
 800068a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <HAL_InitTick+0x40>)
 800068e:	7818      	ldrb	r0, [r3, #0]
 8000690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000694:	fbb3 f3f0 	udiv	r3, r3, r0
 8000698:	4a0c      	ldr	r2, [pc, #48]	; (80006cc <HAL_InitTick+0x44>)
 800069a:	6810      	ldr	r0, [r2, #0]
 800069c:	fbb0 f0f3 	udiv	r0, r0, r3
 80006a0:	f000 f892 	bl	80007c8 <HAL_SYSTICK_Config>
 80006a4:	b968      	cbnz	r0, 80006c2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a6:	2c0f      	cmp	r4, #15
 80006a8:	d901      	bls.n	80006ae <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80006aa:	2001      	movs	r0, #1
  }
   /* Return function status */
  return HAL_OK;
}
 80006ac:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ae:	2200      	movs	r2, #0
 80006b0:	4621      	mov	r1, r4
 80006b2:	f04f 30ff 	mov.w	r0, #4294967295
 80006b6:	f000 f855 	bl	8000764 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006ba:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <HAL_InitTick+0x40>)
 80006bc:	605c      	str	r4, [r3, #4]
  return HAL_OK;
 80006be:	2000      	movs	r0, #0
 80006c0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80006c2:	2001      	movs	r0, #1
 80006c4:	bd10      	pop	{r4, pc}
 80006c6:	bf00      	nop
 80006c8:	20000004 	.word	0x20000004
 80006cc:	20000000 	.word	0x20000000

080006d0 <HAL_Init>:
{
 80006d0:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d2:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <HAL_Init+0x20>)
 80006d4:	6813      	ldr	r3, [r2, #0]
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006dc:	2003      	movs	r0, #3
 80006de:	f000 f82f 	bl	8000740 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006e2:	2000      	movs	r0, #0
 80006e4:	f7ff ffd0 	bl	8000688 <HAL_InitTick>
  HAL_MspInit();
 80006e8:	f7ff ff40 	bl	800056c <HAL_MspInit>
}
 80006ec:	2000      	movs	r0, #0
 80006ee:	bd08      	pop	{r3, pc}
 80006f0:	40022000 	.word	0x40022000

080006f4 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006f4:	4a03      	ldr	r2, [pc, #12]	; (8000704 <HAL_IncTick+0x10>)
 80006f6:	6811      	ldr	r1, [r2, #0]
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <HAL_IncTick+0x14>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	440b      	add	r3, r1
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	20000494 	.word	0x20000494
 8000708:	20000004 	.word	0x20000004

0800070c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800070c:	4b01      	ldr	r3, [pc, #4]	; (8000714 <HAL_GetTick+0x8>)
 800070e:	6818      	ldr	r0, [r3, #0]
}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	20000494 	.word	0x20000494

08000718 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000718:	b538      	push	{r3, r4, r5, lr}
 800071a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800071c:	f7ff fff6 	bl	800070c <HAL_GetTick>
 8000720:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000722:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000726:	d002      	beq.n	800072e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <HAL_Delay+0x24>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800072e:	f7ff ffed 	bl	800070c <HAL_GetTick>
 8000732:	1b40      	subs	r0, r0, r5
 8000734:	4284      	cmp	r4, r0
 8000736:	d8fa      	bhi.n	800072e <HAL_Delay+0x16>
  {
  }
}
 8000738:	bd38      	pop	{r3, r4, r5, pc}
 800073a:	bf00      	nop
 800073c:	20000004 	.word	0x20000004

08000740 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000740:	4a07      	ldr	r2, [pc, #28]	; (8000760 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000742:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000744:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000748:	041b      	lsls	r3, r3, #16
 800074a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800074c:	0200      	lsls	r0, r0, #8
 800074e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000752:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000754:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000758:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800075c:	60d0      	str	r0, [r2, #12]
 800075e:	4770      	bx	lr
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000764:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000766:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <HAL_NVIC_SetPriority+0x5c>)
 8000768:	68db      	ldr	r3, [r3, #12]
 800076a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800076e:	f1c3 0407 	rsb	r4, r3, #7
 8000772:	2c04      	cmp	r4, #4
 8000774:	bf28      	it	cs
 8000776:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000778:	1d1d      	adds	r5, r3, #4
 800077a:	2d06      	cmp	r5, #6
 800077c:	d917      	bls.n	80007ae <HAL_NVIC_SetPriority+0x4a>
 800077e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	2501      	movs	r5, #1
 8000782:	fa05 f404 	lsl.w	r4, r5, r4
 8000786:	3c01      	subs	r4, #1
 8000788:	4021      	ands	r1, r4
 800078a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800078c:	fa05 f303 	lsl.w	r3, r5, r3
 8000790:	3b01      	subs	r3, #1
 8000792:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000796:	2800      	cmp	r0, #0
 8000798:	db0b      	blt.n	80007b2 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079a:	0109      	lsls	r1, r1, #4
 800079c:	b2c9      	uxtb	r1, r1
 800079e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80007a2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80007a6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80007aa:	bc30      	pop	{r4, r5}
 80007ac:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	2300      	movs	r3, #0
 80007b0:	e7e6      	b.n	8000780 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b2:	f000 000f 	and.w	r0, r0, #15
 80007b6:	0109      	lsls	r1, r1, #4
 80007b8:	b2c9      	uxtb	r1, r1
 80007ba:	4b02      	ldr	r3, [pc, #8]	; (80007c4 <HAL_NVIC_SetPriority+0x60>)
 80007bc:	5419      	strb	r1, [r3, r0]
 80007be:	e7f4      	b.n	80007aa <HAL_NVIC_SetPriority+0x46>
 80007c0:	e000ed00 	.word	0xe000ed00
 80007c4:	e000ed14 	.word	0xe000ed14

080007c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c8:	3801      	subs	r0, #1
 80007ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80007ce:	d20a      	bcs.n	80007e6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_SYSTICK_Config+0x24>)
 80007d2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d4:	21f0      	movs	r1, #240	; 0xf0
 80007d6:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <HAL_SYSTICK_Config+0x28>)
 80007d8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007dc:	2000      	movs	r0, #0
 80007de:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e0:	2207      	movs	r2, #7
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007e6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000e010 	.word	0xe000e010
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007f6:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 80007f8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80007fa:	e093      	b.n	8000924 <HAL_GPIO_Init+0x130>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80007fc:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000800:	f10e 0e08 	add.w	lr, lr, #8
 8000804:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000808:	f003 0607 	and.w	r6, r3, #7
 800080c:	00b6      	lsls	r6, r6, #2
 800080e:	270f      	movs	r7, #15
 8000810:	40b7      	lsls	r7, r6
 8000812:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000816:	690f      	ldr	r7, [r1, #16]
 8000818:	fa07 f606 	lsl.w	r6, r7, r6
 800081c:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3] = temp;
 800081e:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
 8000822:	e08e      	b.n	8000942 <HAL_GPIO_Init+0x14e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000824:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000826:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000828:	68cf      	ldr	r7, [r1, #12]
 800082a:	fa07 f70e 	lsl.w	r7, r7, lr
 800082e:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000830:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000832:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000834:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000838:	684e      	ldr	r6, [r1, #4]
 800083a:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800083e:	409e      	lsls	r6, r3
 8000840:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000842:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000844:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000846:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000848:	688d      	ldr	r5, [r1, #8]
 800084a:	fa05 f50e 	lsl.w	r5, r5, lr
 800084e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000850:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000852:	684c      	ldr	r4, [r1, #4]
 8000854:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000858:	d063      	beq.n	8000922 <HAL_GPIO_Init+0x12e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	4c4f      	ldr	r4, [pc, #316]	; (8000998 <HAL_GPIO_Init+0x1a4>)
 800085c:	69a5      	ldr	r5, [r4, #24]
 800085e:	f045 0501 	orr.w	r5, r5, #1
 8000862:	61a5      	str	r5, [r4, #24]
 8000864:	69a4      	ldr	r4, [r4, #24]
 8000866:	f004 0401 	and.w	r4, r4, #1
 800086a:	9401      	str	r4, [sp, #4]
 800086c:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 800086e:	089c      	lsrs	r4, r3, #2
 8000870:	1ca6      	adds	r6, r4, #2
 8000872:	4d4a      	ldr	r5, [pc, #296]	; (800099c <HAL_GPIO_Init+0x1a8>)
 8000874:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000878:	f003 0603 	and.w	r6, r3, #3
 800087c:	00b7      	lsls	r7, r6, #2
 800087e:	260f      	movs	r6, #15
 8000880:	40be      	lsls	r6, r7
 8000882:	ea25 0506 	bic.w	r5, r5, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000886:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800088a:	d077      	beq.n	800097c <HAL_GPIO_Init+0x188>
 800088c:	4e44      	ldr	r6, [pc, #272]	; (80009a0 <HAL_GPIO_Init+0x1ac>)
 800088e:	42b0      	cmp	r0, r6
 8000890:	d076      	beq.n	8000980 <HAL_GPIO_Init+0x18c>
 8000892:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000896:	42b0      	cmp	r0, r6
 8000898:	d074      	beq.n	8000984 <HAL_GPIO_Init+0x190>
 800089a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800089e:	42b0      	cmp	r0, r6
 80008a0:	d072      	beq.n	8000988 <HAL_GPIO_Init+0x194>
 80008a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008a6:	42b0      	cmp	r0, r6
 80008a8:	d070      	beq.n	800098c <HAL_GPIO_Init+0x198>
 80008aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008ae:	42b0      	cmp	r0, r6
 80008b0:	d06e      	beq.n	8000990 <HAL_GPIO_Init+0x19c>
 80008b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008b6:	42b0      	cmp	r0, r6
 80008b8:	d05e      	beq.n	8000978 <HAL_GPIO_Init+0x184>
 80008ba:	2607      	movs	r6, #7
 80008bc:	40be      	lsls	r6, r7
 80008be:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 80008c0:	3402      	adds	r4, #2
 80008c2:	4e36      	ldr	r6, [pc, #216]	; (800099c <HAL_GPIO_Init+0x1a8>)
 80008c4:	f846 5024 	str.w	r5, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80008c8:	4c36      	ldr	r4, [pc, #216]	; (80009a4 <HAL_GPIO_Init+0x1b0>)
 80008ca:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80008cc:	43d4      	mvns	r4, r2
 80008ce:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008d2:	684f      	ldr	r7, [r1, #4]
 80008d4:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80008d8:	d001      	beq.n	80008de <HAL_GPIO_Init+0xea>
        {
          temp |= iocurrent;
 80008da:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 80008de:	4d31      	ldr	r5, [pc, #196]	; (80009a4 <HAL_GPIO_Init+0x1b0>)
 80008e0:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 80008e2:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 80008e4:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008e8:	684f      	ldr	r7, [r1, #4]
 80008ea:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80008ee:	d001      	beq.n	80008f4 <HAL_GPIO_Init+0x100>
        {
          temp |= iocurrent;
 80008f0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 80008f4:	4d2b      	ldr	r5, [pc, #172]	; (80009a4 <HAL_GPIO_Init+0x1b0>)
 80008f6:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008f8:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 80008fa:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008fe:	684f      	ldr	r7, [r1, #4]
 8000900:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000904:	d001      	beq.n	800090a <HAL_GPIO_Init+0x116>
        {
          temp |= iocurrent;
 8000906:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 800090a:	4d26      	ldr	r5, [pc, #152]	; (80009a4 <HAL_GPIO_Init+0x1b0>)
 800090c:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 800090e:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8000910:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000912:	684e      	ldr	r6, [r1, #4]
 8000914:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000918:	d001      	beq.n	800091e <HAL_GPIO_Init+0x12a>
        {
          temp |= iocurrent;
 800091a:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 800091e:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <HAL_GPIO_Init+0x1b0>)
 8000920:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8000922:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000924:	680a      	ldr	r2, [r1, #0]
 8000926:	fa32 f403 	lsrs.w	r4, r2, r3
 800092a:	d033      	beq.n	8000994 <HAL_GPIO_Init+0x1a0>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800092c:	2501      	movs	r5, #1
 800092e:	409d      	lsls	r5, r3
    if(iocurrent)
 8000930:	402a      	ands	r2, r5
 8000932:	d0f6      	beq.n	8000922 <HAL_GPIO_Init+0x12e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000934:	684c      	ldr	r4, [r1, #4]
 8000936:	2c02      	cmp	r4, #2
 8000938:	f43f af60 	beq.w	80007fc <HAL_GPIO_Init+0x8>
 800093c:	2c12      	cmp	r4, #18
 800093e:	f43f af5d 	beq.w	80007fc <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8000942:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000944:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000948:	2403      	movs	r4, #3
 800094a:	fa04 f40e 	lsl.w	r4, r4, lr
 800094e:	43e4      	mvns	r4, r4
 8000950:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000952:	684f      	ldr	r7, [r1, #4]
 8000954:	f007 0703 	and.w	r7, r7, #3
 8000958:	fa07 f70e 	lsl.w	r7, r7, lr
 800095c:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800095e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000960:	684e      	ldr	r6, [r1, #4]
 8000962:	1e77      	subs	r7, r6, #1
 8000964:	2f01      	cmp	r7, #1
 8000966:	f67f af5d 	bls.w	8000824 <HAL_GPIO_Init+0x30>
 800096a:	2e11      	cmp	r6, #17
 800096c:	f43f af5a 	beq.w	8000824 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000970:	2e12      	cmp	r6, #18
 8000972:	f47f af67 	bne.w	8000844 <HAL_GPIO_Init+0x50>
 8000976:	e755      	b.n	8000824 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000978:	2606      	movs	r6, #6
 800097a:	e79f      	b.n	80008bc <HAL_GPIO_Init+0xc8>
 800097c:	2600      	movs	r6, #0
 800097e:	e79d      	b.n	80008bc <HAL_GPIO_Init+0xc8>
 8000980:	2601      	movs	r6, #1
 8000982:	e79b      	b.n	80008bc <HAL_GPIO_Init+0xc8>
 8000984:	2602      	movs	r6, #2
 8000986:	e799      	b.n	80008bc <HAL_GPIO_Init+0xc8>
 8000988:	2603      	movs	r6, #3
 800098a:	e797      	b.n	80008bc <HAL_GPIO_Init+0xc8>
 800098c:	2604      	movs	r6, #4
 800098e:	e795      	b.n	80008bc <HAL_GPIO_Init+0xc8>
 8000990:	2605      	movs	r6, #5
 8000992:	e793      	b.n	80008bc <HAL_GPIO_Init+0xc8>
  }
}
 8000994:	b003      	add	sp, #12
 8000996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000998:	40021000 	.word	0x40021000
 800099c:	40010000 	.word	0x40010000
 80009a0:	48000400 	.word	0x48000400
 80009a4:	40010400 	.word	0x40010400

080009a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009a8:	b90a      	cbnz	r2, 80009ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009aa:	6281      	str	r1, [r0, #40]	; 0x28
 80009ac:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009ae:	6181      	str	r1, [r0, #24]
 80009b0:	4770      	bx	lr
	...

080009b4 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80009b4:	2800      	cmp	r0, #0
 80009b6:	f000 82f7 	beq.w	8000fa8 <HAL_RCC_OscConfig+0x5f4>
{
 80009ba:	b570      	push	{r4, r5, r6, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009c0:	6803      	ldr	r3, [r0, #0]
 80009c2:	f013 0f01 	tst.w	r3, #1
 80009c6:	d05e      	beq.n	8000a86 <HAL_RCC_OscConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80009c8:	4bb3      	ldr	r3, [pc, #716]	; (8000c98 <HAL_RCC_OscConfig+0x2e4>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f003 030c 	and.w	r3, r3, #12
 80009d0:	2b04      	cmp	r3, #4
 80009d2:	d041      	beq.n	8000a58 <HAL_RCC_OscConfig+0xa4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009d4:	4bb0      	ldr	r3, [pc, #704]	; (8000c98 <HAL_RCC_OscConfig+0x2e4>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f003 030c 	and.w	r3, r3, #12
 80009dc:	2b08      	cmp	r3, #8
 80009de:	d034      	beq.n	8000a4a <HAL_RCC_OscConfig+0x96>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009e0:	6863      	ldr	r3, [r4, #4]
 80009e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009e6:	f000 8089 	beq.w	8000afc <HAL_RCC_OscConfig+0x148>
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f040 808c 	bne.w	8000b08 <HAL_RCC_OscConfig+0x154>
 80009f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80009f4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a06:	601a      	str	r2, [r3, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a08:	6863      	ldr	r3, [r4, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f000 8096 	beq.w	8000b3c <HAL_RCC_OscConfig+0x188>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a10:	f7ff fe7c 	bl	800070c <HAL_GetTick>
 8000a14:	4605      	mov	r5, r0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a1a:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a1e:	4b9e      	ldr	r3, [pc, #632]	; (8000c98 <HAL_RCC_OscConfig+0x2e4>)
 8000a20:	6819      	ldr	r1, [r3, #0]
 8000a22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a26:	fa93 f3a3 	rbit	r3, r3
 8000a2a:	fab3 f383 	clz	r3, r3
 8000a2e:	f003 031f 	and.w	r3, r3, #31
 8000a32:	2201      	movs	r2, #1
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	4219      	tst	r1, r3
 8000a3a:	d124      	bne.n	8000a86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a3c:	f7ff fe66 	bl	800070c <HAL_GetTick>
 8000a40:	1b40      	subs	r0, r0, r5
 8000a42:	2864      	cmp	r0, #100	; 0x64
 8000a44:	d9e7      	bls.n	8000a16 <HAL_RCC_OscConfig+0x62>
          {
            return HAL_TIMEOUT;
 8000a46:	2003      	movs	r0, #3
 8000a48:	e2bd      	b.n	8000fc6 <HAL_RCC_OscConfig+0x612>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a4a:	4b93      	ldr	r3, [pc, #588]	; (8000c98 <HAL_RCC_OscConfig+0x2e4>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a56:	d1c3      	bne.n	80009e0 <HAL_RCC_OscConfig+0x2c>
 8000a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a5c:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a60:	4b8d      	ldr	r3, [pc, #564]	; (8000c98 <HAL_RCC_OscConfig+0x2e4>)
 8000a62:	6819      	ldr	r1, [r3, #0]
 8000a64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a68:	fa93 f3a3 	rbit	r3, r3
 8000a6c:	fab3 f383 	clz	r3, r3
 8000a70:	f003 031f 	and.w	r3, r3, #31
 8000a74:	2201      	movs	r2, #1
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	4219      	tst	r1, r3
 8000a7c:	d003      	beq.n	8000a86 <HAL_RCC_OscConfig+0xd2>
 8000a7e:	6863      	ldr	r3, [r4, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	f000 8299 	beq.w	8000fb8 <HAL_RCC_OscConfig+0x604>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a86:	6823      	ldr	r3, [r4, #0]
 8000a88:	f013 0f02 	tst.w	r3, #2
 8000a8c:	f000 809e 	beq.w	8000bcc <HAL_RCC_OscConfig+0x218>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a90:	4b81      	ldr	r3, [pc, #516]	; (8000c98 <HAL_RCC_OscConfig+0x2e4>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f013 0f0c 	tst.w	r3, #12
 8000a98:	d074      	beq.n	8000b84 <HAL_RCC_OscConfig+0x1d0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a9a:	4b7f      	ldr	r3, [pc, #508]	; (8000c98 <HAL_RCC_OscConfig+0x2e4>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f003 030c 	and.w	r3, r3, #12
 8000aa2:	2b08      	cmp	r3, #8
 8000aa4:	d067      	beq.n	8000b76 <HAL_RCC_OscConfig+0x1c2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000aa6:	68e3      	ldr	r3, [r4, #12]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	f000 80cd 	beq.w	8000c48 <HAL_RCC_OscConfig+0x294>
 8000aae:	2201      	movs	r2, #1
 8000ab0:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ab4:	fab3 f383 	clz	r3, r3
 8000ab8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000abc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ac4:	f7ff fe22 	bl	800070c <HAL_GetTick>
 8000ac8:	4605      	mov	r5, r0
 8000aca:	2302      	movs	r3, #2
 8000acc:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ad0:	4b71      	ldr	r3, [pc, #452]	; (8000c98 <HAL_RCC_OscConfig+0x2e4>)
 8000ad2:	6819      	ldr	r1, [r3, #0]
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	fa93 f3a3 	rbit	r3, r3
 8000ada:	fab3 f383 	clz	r3, r3
 8000ade:	f003 031f 	and.w	r3, r3, #31
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	4219      	tst	r1, r3
 8000aea:	f040 809e 	bne.w	8000c2a <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aee:	f7ff fe0d 	bl	800070c <HAL_GetTick>
 8000af2:	1b40      	subs	r0, r0, r5
 8000af4:	2802      	cmp	r0, #2
 8000af6:	d9e8      	bls.n	8000aca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8000af8:	2003      	movs	r0, #3
 8000afa:	e264      	b.n	8000fc6 <HAL_RCC_OscConfig+0x612>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000afc:	4a66      	ldr	r2, [pc, #408]	; (8000c98 <HAL_RCC_OscConfig+0x2e4>)
 8000afe:	6813      	ldr	r3, [r2, #0]
 8000b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b04:	6013      	str	r3, [r2, #0]
 8000b06:	e77f      	b.n	8000a08 <HAL_RCC_OscConfig+0x54>
 8000b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b0c:	d009      	beq.n	8000b22 <HAL_RCC_OscConfig+0x16e>
 8000b0e:	4b62      	ldr	r3, [pc, #392]	; (8000c98 <HAL_RCC_OscConfig+0x2e4>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	e772      	b.n	8000a08 <HAL_RCC_OscConfig+0x54>
 8000b22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b26:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	e765      	b.n	8000a08 <HAL_RCC_OscConfig+0x54>
        tickstart = HAL_GetTick();
 8000b3c:	f7ff fde6 	bl	800070c <HAL_GetTick>
 8000b40:	4605      	mov	r5, r0
 8000b42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b46:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b4a:	4b53      	ldr	r3, [pc, #332]	; (8000c98 <HAL_RCC_OscConfig+0x2e4>)
 8000b4c:	6819      	ldr	r1, [r3, #0]
 8000b4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b52:	fa93 f3a3 	rbit	r3, r3
 8000b56:	fab3 f383 	clz	r3, r3
 8000b5a:	f003 031f 	and.w	r3, r3, #31
 8000b5e:	2201      	movs	r2, #1
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	4219      	tst	r1, r3
 8000b66:	d08e      	beq.n	8000a86 <HAL_RCC_OscConfig+0xd2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b68:	f7ff fdd0 	bl	800070c <HAL_GetTick>
 8000b6c:	1b40      	subs	r0, r0, r5
 8000b6e:	2864      	cmp	r0, #100	; 0x64
 8000b70:	d9e7      	bls.n	8000b42 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000b72:	2003      	movs	r0, #3
 8000b74:	e227      	b.n	8000fc6 <HAL_RCC_OscConfig+0x612>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b76:	4b48      	ldr	r3, [pc, #288]	; (8000c98 <HAL_RCC_OscConfig+0x2e4>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b82:	d190      	bne.n	8000aa6 <HAL_RCC_OscConfig+0xf2>
 8000b84:	2302      	movs	r3, #2
 8000b86:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b8a:	4b43      	ldr	r3, [pc, #268]	; (8000c98 <HAL_RCC_OscConfig+0x2e4>)
 8000b8c:	6819      	ldr	r1, [r3, #0]
 8000b8e:	2302      	movs	r3, #2
 8000b90:	fa93 f3a3 	rbit	r3, r3
 8000b94:	fab3 f383 	clz	r3, r3
 8000b98:	f003 031f 	and.w	r3, r3, #31
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	4219      	tst	r1, r3
 8000ba4:	d004      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x1fc>
 8000ba6:	68e3      	ldr	r3, [r4, #12]
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d001      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x1fc>
        return HAL_ERROR;
 8000bac:	2001      	movs	r0, #1
 8000bae:	e20a      	b.n	8000fc6 <HAL_RCC_OscConfig+0x612>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bb0:	4839      	ldr	r0, [pc, #228]	; (8000c98 <HAL_RCC_OscConfig+0x2e4>)
 8000bb2:	6803      	ldr	r3, [r0, #0]
 8000bb4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000bb8:	6921      	ldr	r1, [r4, #16]
 8000bba:	22f8      	movs	r2, #248	; 0xf8
 8000bbc:	fa92 f2a2 	rbit	r2, r2
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bcc:	6823      	ldr	r3, [r4, #0]
 8000bce:	f013 0f08 	tst.w	r3, #8
 8000bd2:	f000 808d 	beq.w	8000cf0 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bd6:	6963      	ldr	r3, [r4, #20]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d061      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x2ec>
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000be2:	fab2 f282 	clz	r2, r2
 8000be6:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <HAL_RCC_OscConfig+0x2e8>)
 8000be8:	4413      	add	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bee:	f7ff fd8d 	bl	800070c <HAL_GetTick>
 8000bf2:	4605      	mov	r5, r0
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	fa93 f2a3 	rbit	r2, r3
 8000bfa:	fa93 f2a3 	rbit	r2, r3
 8000bfe:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c02:	4a25      	ldr	r2, [pc, #148]	; (8000c98 <HAL_RCC_OscConfig+0x2e4>)
 8000c04:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000c06:	fa93 f3a3 	rbit	r3, r3
 8000c0a:	fab3 f383 	clz	r3, r3
 8000c0e:	f003 031f 	and.w	r3, r3, #31
 8000c12:	2201      	movs	r2, #1
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	4219      	tst	r1, r3
 8000c1a:	d169      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c1c:	f7ff fd76 	bl	800070c <HAL_GetTick>
 8000c20:	1b40      	subs	r0, r0, r5
 8000c22:	2802      	cmp	r0, #2
 8000c24:	d9e6      	bls.n	8000bf4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000c26:	2003      	movs	r0, #3
 8000c28:	e1cd      	b.n	8000fc6 <HAL_RCC_OscConfig+0x612>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c2a:	481b      	ldr	r0, [pc, #108]	; (8000c98 <HAL_RCC_OscConfig+0x2e4>)
 8000c2c:	6803      	ldr	r3, [r0, #0]
 8000c2e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c32:	6921      	ldr	r1, [r4, #16]
 8000c34:	22f8      	movs	r2, #248	; 0xf8
 8000c36:	fa92 f2a2 	rbit	r2, r2
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c42:	4313      	orrs	r3, r2
 8000c44:	6003      	str	r3, [r0, #0]
 8000c46:	e7c1      	b.n	8000bcc <HAL_RCC_OscConfig+0x218>
 8000c48:	2301      	movs	r3, #1
 8000c4a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8000c4e:	fab3 f383 	clz	r3, r3
 8000c52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c60:	f7ff fd54 	bl	800070c <HAL_GetTick>
 8000c64:	4605      	mov	r5, r0
 8000c66:	2302      	movs	r3, #2
 8000c68:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_RCC_OscConfig+0x2e4>)
 8000c6e:	6819      	ldr	r1, [r3, #0]
 8000c70:	2302      	movs	r3, #2
 8000c72:	fa93 f3a3 	rbit	r3, r3
 8000c76:	fab3 f383 	clz	r3, r3
 8000c7a:	f003 031f 	and.w	r3, r3, #31
 8000c7e:	2201      	movs	r2, #1
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	4219      	tst	r1, r3
 8000c86:	d0a1      	beq.n	8000bcc <HAL_RCC_OscConfig+0x218>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c88:	f7ff fd40 	bl	800070c <HAL_GetTick>
 8000c8c:	1b40      	subs	r0, r0, r5
 8000c8e:	2802      	cmp	r0, #2
 8000c90:	d9e9      	bls.n	8000c66 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8000c92:	2003      	movs	r0, #3
 8000c94:	e197      	b.n	8000fc6 <HAL_RCC_OscConfig+0x612>
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	10908120 	.word	0x10908120
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ca6:	fab2 f282 	clz	r2, r2
 8000caa:	4bc0      	ldr	r3, [pc, #768]	; (8000fac <HAL_RCC_OscConfig+0x5f8>)
 8000cac:	4413      	add	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cb4:	f7ff fd2a 	bl	800070c <HAL_GetTick>
 8000cb8:	4605      	mov	r5, r0
 8000cba:	2302      	movs	r3, #2
 8000cbc:	fa93 f2a3 	rbit	r2, r3
 8000cc0:	fa93 f2a3 	rbit	r2, r3
 8000cc4:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cc8:	4ab9      	ldr	r2, [pc, #740]	; (8000fb0 <HAL_RCC_OscConfig+0x5fc>)
 8000cca:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000ccc:	fa93 f3a3 	rbit	r3, r3
 8000cd0:	fab3 f383 	clz	r3, r3
 8000cd4:	f003 031f 	and.w	r3, r3, #31
 8000cd8:	2201      	movs	r2, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	4219      	tst	r1, r3
 8000ce0:	d006      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x33c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ce2:	f7ff fd13 	bl	800070c <HAL_GetTick>
 8000ce6:	1b40      	subs	r0, r0, r5
 8000ce8:	2802      	cmp	r0, #2
 8000cea:	d9e6      	bls.n	8000cba <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8000cec:	2003      	movs	r0, #3
 8000cee:	e16a      	b.n	8000fc6 <HAL_RCC_OscConfig+0x612>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	f013 0f04 	tst.w	r3, #4
 8000cf6:	f000 80b3 	beq.w	8000e60 <HAL_RCC_OscConfig+0x4ac>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cfa:	4bad      	ldr	r3, [pc, #692]	; (8000fb0 <HAL_RCC_OscConfig+0x5fc>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000d02:	d10b      	bne.n	8000d1c <HAL_RCC_OscConfig+0x368>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d04:	4baa      	ldr	r3, [pc, #680]	; (8000fb0 <HAL_RCC_OscConfig+0x5fc>)
 8000d06:	69da      	ldr	r2, [r3, #28]
 8000d08:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d0c:	61da      	str	r2, [r3, #28]
 8000d0e:	69db      	ldr	r3, [r3, #28]
 8000d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d14:	9301      	str	r3, [sp, #4]
 8000d16:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d18:	2501      	movs	r5, #1
 8000d1a:	e000      	b.n	8000d1e <HAL_RCC_OscConfig+0x36a>
    FlagStatus       pwrclkchanged = RESET;
 8000d1c:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d1e:	4ba5      	ldr	r3, [pc, #660]	; (8000fb4 <HAL_RCC_OscConfig+0x600>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000d26:	d016      	beq.n	8000d56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d28:	68a3      	ldr	r3, [r4, #8]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d027      	beq.n	8000d7e <HAL_RCC_OscConfig+0x3ca>
 8000d2e:	bb63      	cbnz	r3, 8000d8a <HAL_RCC_OscConfig+0x3d6>
 8000d30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d34:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000d38:	6a1a      	ldr	r2, [r3, #32]
 8000d3a:	f022 0201 	bic.w	r2, r2, #1
 8000d3e:	621a      	str	r2, [r3, #32]
 8000d40:	6a1a      	ldr	r2, [r3, #32]
 8000d42:	f022 0204 	bic.w	r2, r2, #4
 8000d46:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d48:	68a3      	ldr	r3, [r4, #8]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d05b      	beq.n	8000e06 <HAL_RCC_OscConfig+0x452>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d4e:	f7ff fcdd 	bl	800070c <HAL_GetTick>
 8000d52:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d54:	e045      	b.n	8000de2 <HAL_RCC_OscConfig+0x42e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d56:	4a97      	ldr	r2, [pc, #604]	; (8000fb4 <HAL_RCC_OscConfig+0x600>)
 8000d58:	6813      	ldr	r3, [r2, #0]
 8000d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000d60:	f7ff fcd4 	bl	800070c <HAL_GetTick>
 8000d64:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d66:	4b93      	ldr	r3, [pc, #588]	; (8000fb4 <HAL_RCC_OscConfig+0x600>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000d6e:	d1db      	bne.n	8000d28 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d70:	f7ff fccc 	bl	800070c <HAL_GetTick>
 8000d74:	1b80      	subs	r0, r0, r6
 8000d76:	2864      	cmp	r0, #100	; 0x64
 8000d78:	d9f5      	bls.n	8000d66 <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 8000d7a:	2003      	movs	r0, #3
 8000d7c:	e123      	b.n	8000fc6 <HAL_RCC_OscConfig+0x612>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d7e:	4a8c      	ldr	r2, [pc, #560]	; (8000fb0 <HAL_RCC_OscConfig+0x5fc>)
 8000d80:	6a13      	ldr	r3, [r2, #32]
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6213      	str	r3, [r2, #32]
 8000d88:	e7de      	b.n	8000d48 <HAL_RCC_OscConfig+0x394>
 8000d8a:	2b05      	cmp	r3, #5
 8000d8c:	d009      	beq.n	8000da2 <HAL_RCC_OscConfig+0x3ee>
 8000d8e:	4b88      	ldr	r3, [pc, #544]	; (8000fb0 <HAL_RCC_OscConfig+0x5fc>)
 8000d90:	6a1a      	ldr	r2, [r3, #32]
 8000d92:	f022 0201 	bic.w	r2, r2, #1
 8000d96:	621a      	str	r2, [r3, #32]
 8000d98:	6a1a      	ldr	r2, [r3, #32]
 8000d9a:	f022 0204 	bic.w	r2, r2, #4
 8000d9e:	621a      	str	r2, [r3, #32]
 8000da0:	e7d2      	b.n	8000d48 <HAL_RCC_OscConfig+0x394>
 8000da2:	4b83      	ldr	r3, [pc, #524]	; (8000fb0 <HAL_RCC_OscConfig+0x5fc>)
 8000da4:	6a1a      	ldr	r2, [r3, #32]
 8000da6:	f042 0204 	orr.w	r2, r2, #4
 8000daa:	621a      	str	r2, [r3, #32]
 8000dac:	6a1a      	ldr	r2, [r3, #32]
 8000dae:	f042 0201 	orr.w	r2, r2, #1
 8000db2:	621a      	str	r2, [r3, #32]
 8000db4:	e7c8      	b.n	8000d48 <HAL_RCC_OscConfig+0x394>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000db6:	4b7e      	ldr	r3, [pc, #504]	; (8000fb0 <HAL_RCC_OscConfig+0x5fc>)
 8000db8:	6a19      	ldr	r1, [r3, #32]
 8000dba:	2302      	movs	r3, #2
 8000dbc:	fa93 f3a3 	rbit	r3, r3
 8000dc0:	fab3 f383 	clz	r3, r3
 8000dc4:	f003 031f 	and.w	r3, r3, #31
 8000dc8:	2201      	movs	r2, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	4219      	tst	r1, r3
 8000dd0:	d145      	bne.n	8000e5e <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dd2:	f7ff fc9b 	bl	800070c <HAL_GetTick>
 8000dd6:	1b80      	subs	r0, r0, r6
 8000dd8:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80ed 	bhi.w	8000fbc <HAL_RCC_OscConfig+0x608>
 8000de2:	2302      	movs	r3, #2
 8000de4:	fa93 f2a3 	rbit	r2, r3
 8000de8:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dec:	fab3 f383 	clz	r3, r3
 8000df0:	095b      	lsrs	r3, r3, #5
 8000df2:	f043 0302 	orr.w	r3, r3, #2
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d0dd      	beq.n	8000db6 <HAL_RCC_OscConfig+0x402>
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	fa93 f3a3 	rbit	r3, r3
 8000e00:	4b6b      	ldr	r3, [pc, #428]	; (8000fb0 <HAL_RCC_OscConfig+0x5fc>)
 8000e02:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000e04:	e7d9      	b.n	8000dba <HAL_RCC_OscConfig+0x406>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e06:	f7ff fc81 	bl	800070c <HAL_GetTick>
 8000e0a:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e0c:	e015      	b.n	8000e3a <HAL_RCC_OscConfig+0x486>
 8000e0e:	4b68      	ldr	r3, [pc, #416]	; (8000fb0 <HAL_RCC_OscConfig+0x5fc>)
 8000e10:	6a19      	ldr	r1, [r3, #32]
 8000e12:	2302      	movs	r3, #2
 8000e14:	fa93 f3a3 	rbit	r3, r3
 8000e18:	fab3 f383 	clz	r3, r3
 8000e1c:	f003 031f 	and.w	r3, r3, #31
 8000e20:	2201      	movs	r2, #1
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	4219      	tst	r1, r3
 8000e28:	d019      	beq.n	8000e5e <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e2a:	f7ff fc6f 	bl	800070c <HAL_GetTick>
 8000e2e:	1b80      	subs	r0, r0, r6
 8000e30:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e34:	4298      	cmp	r0, r3
 8000e36:	f200 80c3 	bhi.w	8000fc0 <HAL_RCC_OscConfig+0x60c>
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	fa93 f2a3 	rbit	r2, r3
 8000e40:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e44:	fab3 f383 	clz	r3, r3
 8000e48:	095b      	lsrs	r3, r3, #5
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d0dd      	beq.n	8000e0e <HAL_RCC_OscConfig+0x45a>
 8000e52:	2302      	movs	r3, #2
 8000e54:	fa93 f3a3 	rbit	r3, r3
 8000e58:	4b55      	ldr	r3, [pc, #340]	; (8000fb0 <HAL_RCC_OscConfig+0x5fc>)
 8000e5a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000e5c:	e7d9      	b.n	8000e12 <HAL_RCC_OscConfig+0x45e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e5e:	bbb5      	cbnz	r5, 8000ece <HAL_RCC_OscConfig+0x51a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e60:	69a3      	ldr	r3, [r4, #24]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 80ae 	beq.w	8000fc4 <HAL_RCC_OscConfig+0x610>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e68:	4a51      	ldr	r2, [pc, #324]	; (8000fb0 <HAL_RCC_OscConfig+0x5fc>)
 8000e6a:	6852      	ldr	r2, [r2, #4]
 8000e6c:	f002 020c 	and.w	r2, r2, #12
 8000e70:	2a08      	cmp	r2, #8
 8000e72:	f000 80aa 	beq.w	8000fca <HAL_RCC_OscConfig+0x616>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d02f      	beq.n	8000eda <HAL_RCC_OscConfig+0x526>
 8000e7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e7e:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e82:	fab3 f383 	clz	r3, r3
 8000e86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff fc3a 	bl	800070c <HAL_GetTick>
 8000e98:	4604      	mov	r4, r0
 8000e9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e9e:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ea2:	4b43      	ldr	r3, [pc, #268]	; (8000fb0 <HAL_RCC_OscConfig+0x5fc>)
 8000ea4:	6819      	ldr	r1, [r3, #0]
 8000ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eaa:	fa93 f3a3 	rbit	r3, r3
 8000eae:	fab3 f383 	clz	r3, r3
 8000eb2:	f003 031f 	and.w	r3, r3, #31
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	4219      	tst	r1, r3
 8000ebe:	d071      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x5f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ec0:	f7ff fc24 	bl	800070c <HAL_GetTick>
 8000ec4:	1b00      	subs	r0, r0, r4
 8000ec6:	2802      	cmp	r0, #2
 8000ec8:	d9e7      	bls.n	8000e9a <HAL_RCC_OscConfig+0x4e6>
          {
            return HAL_TIMEOUT;
 8000eca:	2003      	movs	r0, #3
 8000ecc:	e07b      	b.n	8000fc6 <HAL_RCC_OscConfig+0x612>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ece:	4a38      	ldr	r2, [pc, #224]	; (8000fb0 <HAL_RCC_OscConfig+0x5fc>)
 8000ed0:	69d3      	ldr	r3, [r2, #28]
 8000ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	61d3      	str	r3, [r2, #28]
 8000ed8:	e7c2      	b.n	8000e60 <HAL_RCC_OscConfig+0x4ac>
 8000eda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ede:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000ee2:	fab3 f383 	clz	r3, r3
 8000ee6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000eea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fc0a 	bl	800070c <HAL_GetTick>
 8000ef8:	4605      	mov	r5, r0
 8000efa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000efe:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f02:	4b2b      	ldr	r3, [pc, #172]	; (8000fb0 <HAL_RCC_OscConfig+0x5fc>)
 8000f04:	6819      	ldr	r1, [r3, #0]
 8000f06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f0a:	fa93 f3a3 	rbit	r3, r3
 8000f0e:	fab3 f383 	clz	r3, r3
 8000f12:	f003 031f 	and.w	r3, r3, #31
 8000f16:	2201      	movs	r2, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	4219      	tst	r1, r3
 8000f1e:	d006      	beq.n	8000f2e <HAL_RCC_OscConfig+0x57a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f20:	f7ff fbf4 	bl	800070c <HAL_GetTick>
 8000f24:	1b40      	subs	r0, r0, r5
 8000f26:	2802      	cmp	r0, #2
 8000f28:	d9e7      	bls.n	8000efa <HAL_RCC_OscConfig+0x546>
            return HAL_TIMEOUT;
 8000f2a:	2003      	movs	r0, #3
 8000f2c:	e04b      	b.n	8000fc6 <HAL_RCC_OscConfig+0x612>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f2e:	4a20      	ldr	r2, [pc, #128]	; (8000fb0 <HAL_RCC_OscConfig+0x5fc>)
 8000f30:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000f32:	f023 030f 	bic.w	r3, r3, #15
 8000f36:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f3c:	6853      	ldr	r3, [r2, #4]
 8000f3e:	f423 1376 	bic.w	r3, r3, #4030464	; 0x3d8000
 8000f42:	6a21      	ldr	r1, [r4, #32]
 8000f44:	69e0      	ldr	r0, [r4, #28]
 8000f46:	4301      	orrs	r1, r0
 8000f48:	430b      	orrs	r3, r1
 8000f4a:	6053      	str	r3, [r2, #4]
 8000f4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f50:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000f54:	fab3 f383 	clz	r3, r3
 8000f58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f66:	f7ff fbd1 	bl	800070c <HAL_GetTick>
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f70:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_RCC_OscConfig+0x5fc>)
 8000f76:	6819      	ldr	r1, [r3, #0]
 8000f78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f7c:	fa93 f3a3 	rbit	r3, r3
 8000f80:	fab3 f383 	clz	r3, r3
 8000f84:	f003 031f 	and.w	r3, r3, #31
 8000f88:	2201      	movs	r2, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	4219      	tst	r1, r3
 8000f90:	d106      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x5ec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f92:	f7ff fbbb 	bl	800070c <HAL_GetTick>
 8000f96:	1b00      	subs	r0, r0, r4
 8000f98:	2802      	cmp	r0, #2
 8000f9a:	d9e7      	bls.n	8000f6c <HAL_RCC_OscConfig+0x5b8>
            return HAL_TIMEOUT;
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	e012      	b.n	8000fc6 <HAL_RCC_OscConfig+0x612>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	e010      	b.n	8000fc6 <HAL_RCC_OscConfig+0x612>
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	e00e      	b.n	8000fc6 <HAL_RCC_OscConfig+0x612>
    return HAL_ERROR;
 8000fa8:	2001      	movs	r0, #1
 8000faa:	4770      	bx	lr
 8000fac:	10908120 	.word	0x10908120
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40007000 	.word	0x40007000
        return HAL_ERROR;
 8000fb8:	2001      	movs	r0, #1
 8000fba:	e004      	b.n	8000fc6 <HAL_RCC_OscConfig+0x612>
          return HAL_TIMEOUT;
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	e002      	b.n	8000fc6 <HAL_RCC_OscConfig+0x612>
          return HAL_TIMEOUT;
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	e000      	b.n	8000fc6 <HAL_RCC_OscConfig+0x612>
  return HAL_OK;
 8000fc4:	2000      	movs	r0, #0
}
 8000fc6:	b002      	add	sp, #8
 8000fc8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000fca:	2001      	movs	r0, #1
 8000fcc:	e7fb      	b.n	8000fc6 <HAL_RCC_OscConfig+0x612>
 8000fce:	bf00      	nop

08000fd0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <HAL_RCC_GetSysClockFreq+0x64>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000fd4:	f003 020c 	and.w	r2, r3, #12
 8000fd8:	2a08      	cmp	r2, #8
 8000fda:	d129      	bne.n	8001030 <HAL_RCC_GetSysClockFreq+0x60>
{
 8000fdc:	b410      	push	{r4}
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000fde:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8000fe2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000fe6:	fa92 f2a2 	rbit	r2, r2
 8000fea:	fab2 f282 	clz	r2, r2
 8000fee:	fa21 f202 	lsr.w	r2, r1, r2
 8000ff2:	4c11      	ldr	r4, [pc, #68]	; (8001038 <HAL_RCC_GetSysClockFreq+0x68>)
 8000ff4:	5ca0      	ldrb	r0, [r4, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000ff6:	4a0f      	ldr	r2, [pc, #60]	; (8001034 <HAL_RCC_GetSysClockFreq+0x64>)
 8000ff8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ffa:	f002 020f 	and.w	r2, r2, #15
 8000ffe:	210f      	movs	r1, #15
 8001000:	fa91 f1a1 	rbit	r1, r1
 8001004:	fab1 f181 	clz	r1, r1
 8001008:	40ca      	lsrs	r2, r1
 800100a:	4422      	add	r2, r4
 800100c:	7c12      	ldrb	r2, [r2, #16]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800100e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001012:	d107      	bne.n	8001024 <HAL_RCC_GetSysClockFreq+0x54>
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_RCC_GetSysClockFreq+0x6c>)
 8001016:	fbb3 f3f2 	udiv	r3, r3, r2
 800101a:	fb03 f000 	mul.w	r0, r3, r0
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800101e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001022:	4770      	bx	lr
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <HAL_RCC_GetSysClockFreq+0x6c>)
 8001026:	fbb3 f3f2 	udiv	r3, r3, r2
 800102a:	fb03 f000 	mul.w	r0, r3, r0
 800102e:	e7f6      	b.n	800101e <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001032:	4770      	bx	lr
 8001034:	40021000 	.word	0x40021000
 8001038:	0800168c 	.word	0x0800168c
 800103c:	007a1200 	.word	0x007a1200

08001040 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001040:	2800      	cmp	r0, #0
 8001042:	f000 80c0 	beq.w	80011c6 <HAL_RCC_ClockConfig+0x186>
{
 8001046:	b570      	push	{r4, r5, r6, lr}
 8001048:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800104a:	4b61      	ldr	r3, [pc, #388]	; (80011d0 <HAL_RCC_ClockConfig+0x190>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	428b      	cmp	r3, r1
 8001054:	d20c      	bcs.n	8001070 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001056:	4a5e      	ldr	r2, [pc, #376]	; (80011d0 <HAL_RCC_ClockConfig+0x190>)
 8001058:	6813      	ldr	r3, [r2, #0]
 800105a:	f023 0307 	bic.w	r3, r3, #7
 800105e:	430b      	orrs	r3, r1
 8001060:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001062:	6813      	ldr	r3, [r2, #0]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	4299      	cmp	r1, r3
 800106a:	d001      	beq.n	8001070 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 800106c:	2001      	movs	r0, #1
 800106e:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001070:	6823      	ldr	r3, [r4, #0]
 8001072:	f013 0f02 	tst.w	r3, #2
 8001076:	d006      	beq.n	8001086 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001078:	4a56      	ldr	r2, [pc, #344]	; (80011d4 <HAL_RCC_ClockConfig+0x194>)
 800107a:	6853      	ldr	r3, [r2, #4]
 800107c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001080:	68a0      	ldr	r0, [r4, #8]
 8001082:	4303      	orrs	r3, r0
 8001084:	6053      	str	r3, [r2, #4]
 8001086:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001088:	6823      	ldr	r3, [r4, #0]
 800108a:	f013 0f01 	tst.w	r3, #1
 800108e:	d05a      	beq.n	8001146 <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001090:	6863      	ldr	r3, [r4, #4]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d02d      	beq.n	80010f2 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001096:	2b02      	cmp	r3, #2
 8001098:	d040      	beq.n	800111c <HAL_RCC_ClockConfig+0xdc>
 800109a:	2202      	movs	r2, #2
 800109c:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a0:	4a4c      	ldr	r2, [pc, #304]	; (80011d4 <HAL_RCC_ClockConfig+0x194>)
 80010a2:	6810      	ldr	r0, [r2, #0]
 80010a4:	2202      	movs	r2, #2
 80010a6:	fa92 f2a2 	rbit	r2, r2
 80010aa:	fab2 f282 	clz	r2, r2
 80010ae:	f002 021f 	and.w	r2, r2, #31
 80010b2:	2101      	movs	r1, #1
 80010b4:	fa01 f202 	lsl.w	r2, r1, r2
 80010b8:	4210      	tst	r0, r2
 80010ba:	f000 8086 	beq.w	80011ca <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010be:	4945      	ldr	r1, [pc, #276]	; (80011d4 <HAL_RCC_ClockConfig+0x194>)
 80010c0:	684a      	ldr	r2, [r1, #4]
 80010c2:	f022 0203 	bic.w	r2, r2, #3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80010ca:	f7ff fb1f 	bl	800070c <HAL_GetTick>
 80010ce:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010d0:	4b40      	ldr	r3, [pc, #256]	; (80011d4 <HAL_RCC_ClockConfig+0x194>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 030c 	and.w	r3, r3, #12
 80010d8:	6862      	ldr	r2, [r4, #4]
 80010da:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80010de:	d032      	beq.n	8001146 <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010e0:	f7ff fb14 	bl	800070c <HAL_GetTick>
 80010e4:	1b80      	subs	r0, r0, r6
 80010e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80010ea:	4298      	cmp	r0, r3
 80010ec:	d9f0      	bls.n	80010d0 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 80010ee:	2003      	movs	r0, #3
 80010f0:	bd70      	pop	{r4, r5, r6, pc}
 80010f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010f6:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fa:	4a36      	ldr	r2, [pc, #216]	; (80011d4 <HAL_RCC_ClockConfig+0x194>)
 80010fc:	6810      	ldr	r0, [r2, #0]
 80010fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001102:	fa92 f2a2 	rbit	r2, r2
 8001106:	fab2 f282 	clz	r2, r2
 800110a:	f002 021f 	and.w	r2, r2, #31
 800110e:	2101      	movs	r1, #1
 8001110:	fa01 f202 	lsl.w	r2, r1, r2
 8001114:	4210      	tst	r0, r2
 8001116:	d1d2      	bne.n	80010be <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8001118:	2001      	movs	r0, #1
 800111a:	bd70      	pop	{r4, r5, r6, pc}
 800111c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001120:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001124:	4a2b      	ldr	r2, [pc, #172]	; (80011d4 <HAL_RCC_ClockConfig+0x194>)
 8001126:	6810      	ldr	r0, [r2, #0]
 8001128:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800112c:	fa92 f2a2 	rbit	r2, r2
 8001130:	fab2 f282 	clz	r2, r2
 8001134:	f002 021f 	and.w	r2, r2, #31
 8001138:	2101      	movs	r1, #1
 800113a:	fa01 f202 	lsl.w	r2, r1, r2
 800113e:	4210      	tst	r0, r2
 8001140:	d1bd      	bne.n	80010be <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8001142:	2001      	movs	r0, #1
 8001144:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001146:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <HAL_RCC_ClockConfig+0x190>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	429d      	cmp	r5, r3
 8001150:	d20c      	bcs.n	800116c <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001152:	4a1f      	ldr	r2, [pc, #124]	; (80011d0 <HAL_RCC_ClockConfig+0x190>)
 8001154:	6813      	ldr	r3, [r2, #0]
 8001156:	f023 0307 	bic.w	r3, r3, #7
 800115a:	432b      	orrs	r3, r5
 800115c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800115e:	6813      	ldr	r3, [r2, #0]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	429d      	cmp	r5, r3
 8001166:	d001      	beq.n	800116c <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 8001168:	2001      	movs	r0, #1
}
 800116a:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	f013 0f04 	tst.w	r3, #4
 8001172:	d006      	beq.n	8001182 <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001174:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <HAL_RCC_ClockConfig+0x194>)
 8001176:	6853      	ldr	r3, [r2, #4]
 8001178:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800117c:	68e1      	ldr	r1, [r4, #12]
 800117e:	430b      	orrs	r3, r1
 8001180:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001182:	6823      	ldr	r3, [r4, #0]
 8001184:	f013 0f08 	tst.w	r3, #8
 8001188:	d007      	beq.n	800119a <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800118a:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <HAL_RCC_ClockConfig+0x194>)
 800118c:	6853      	ldr	r3, [r2, #4]
 800118e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001192:	6921      	ldr	r1, [r4, #16]
 8001194:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001198:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800119a:	f7ff ff19 	bl	8000fd0 <HAL_RCC_GetSysClockFreq>
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <HAL_RCC_ClockConfig+0x194>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011a6:	22f0      	movs	r2, #240	; 0xf0
 80011a8:	fa92 f2a2 	rbit	r2, r2
 80011ac:	fab2 f282 	clz	r2, r2
 80011b0:	40d3      	lsrs	r3, r2
 80011b2:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <HAL_RCC_ClockConfig+0x198>)
 80011b4:	5cd3      	ldrb	r3, [r2, r3]
 80011b6:	40d8      	lsrs	r0, r3
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <HAL_RCC_ClockConfig+0x19c>)
 80011ba:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff fa63 	bl	8000688 <HAL_InitTick>
  return HAL_OK;
 80011c2:	2000      	movs	r0, #0
 80011c4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80011c6:	2001      	movs	r0, #1
 80011c8:	4770      	bx	lr
        return HAL_ERROR;
 80011ca:	2001      	movs	r0, #1
 80011cc:	bd70      	pop	{r4, r5, r6, pc}
 80011ce:	bf00      	nop
 80011d0:	40022000 	.word	0x40022000
 80011d4:	40021000 	.word	0x40021000
 80011d8:	08001674 	.word	0x08001674
 80011dc:	20000000 	.word	0x20000000

080011e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80011e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011e2:	4605      	mov	r5, r0
 80011e4:	460f      	mov	r7, r1
 80011e6:	4616      	mov	r6, r2
 80011e8:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80011ea:	e039      	b.n	8001260 <SPI_WaitFlagStateUntilTimeout+0x80>
  {
    if (Timeout != HAL_MAX_DELAY)
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80011ec:	b12c      	cbz	r4, 80011fa <SPI_WaitFlagStateUntilTimeout+0x1a>
 80011ee:	f7ff fa8d 	bl	800070c <HAL_GetTick>
 80011f2:	9b06      	ldr	r3, [sp, #24]
 80011f4:	1ac0      	subs	r0, r0, r3
 80011f6:	4284      	cmp	r4, r0
 80011f8:	d832      	bhi.n	8001260 <SPI_WaitFlagStateUntilTimeout+0x80>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80011fa:	682a      	ldr	r2, [r5, #0]
 80011fc:	6853      	ldr	r3, [r2, #4]
 80011fe:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8001202:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001204:	686b      	ldr	r3, [r5, #4]
 8001206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800120a:	d00b      	beq.n	8001224 <SPI_WaitFlagStateUntilTimeout+0x44>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800120c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800120e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001212:	d014      	beq.n	800123e <SPI_WaitFlagStateUntilTimeout+0x5e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001214:	2301      	movs	r3, #1
 8001216:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800121a:	2300      	movs	r3, #0
 800121c:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 8001220:	2003      	movs	r0, #3
 8001222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001224:	68ab      	ldr	r3, [r5, #8]
 8001226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800122a:	d002      	beq.n	8001232 <SPI_WaitFlagStateUntilTimeout+0x52>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800122c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001230:	d1ec      	bne.n	800120c <SPI_WaitFlagStateUntilTimeout+0x2c>
          __HAL_SPI_DISABLE(hspi);
 8001232:	682a      	ldr	r2, [r5, #0]
 8001234:	6813      	ldr	r3, [r2, #0]
 8001236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	e7e6      	b.n	800120c <SPI_WaitFlagStateUntilTimeout+0x2c>
          SPI_RESET_CRC(hspi);
 800123e:	682a      	ldr	r2, [r5, #0]
 8001240:	6813      	ldr	r3, [r2, #0]
 8001242:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	682a      	ldr	r2, [r5, #0]
 800124a:	6813      	ldr	r3, [r2, #0]
 800124c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e7df      	b.n	8001214 <SPI_WaitFlagStateUntilTimeout+0x34>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001254:	2301      	movs	r3, #1
 8001256:	42b3      	cmp	r3, r6
 8001258:	d009      	beq.n	800126e <SPI_WaitFlagStateUntilTimeout+0x8e>
    if (Timeout != HAL_MAX_DELAY)
 800125a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800125e:	d1c5      	bne.n	80011ec <SPI_WaitFlagStateUntilTimeout+0xc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001260:	682b      	ldr	r3, [r5, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	ea37 0303 	bics.w	r3, r7, r3
 8001268:	d0f4      	beq.n	8001254 <SPI_WaitFlagStateUntilTimeout+0x74>
 800126a:	2300      	movs	r3, #0
 800126c:	e7f3      	b.n	8001256 <SPI_WaitFlagStateUntilTimeout+0x76>
      }
    }
  }

  return HAL_OK;
 800126e:	2000      	movs	r0, #0
}
 8001270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001272 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001272:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001274:	b083      	sub	sp, #12
 8001276:	4607      	mov	r7, r0
 8001278:	460c      	mov	r4, r1
 800127a:	4615      	mov	r5, r2
 800127c:	461e      	mov	r6, r3
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800127e:	e002      	b.n	8001286 <SPI_WaitFifoStateUntilTimeout+0x14>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 8001280:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001284:	d110      	bne.n	80012a8 <SPI_WaitFifoStateUntilTimeout+0x36>
  while ((hspi->Instance->SR & Fifo) != State)
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	6893      	ldr	r3, [r2, #8]
 800128a:	4023      	ands	r3, r4
 800128c:	42ab      	cmp	r3, r5
 800128e:	d03f      	beq.n	8001310 <SPI_WaitFifoStateUntilTimeout+0x9e>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001290:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8001294:	d1f4      	bne.n	8001280 <SPI_WaitFifoStateUntilTimeout+0xe>
 8001296:	2d00      	cmp	r5, #0
 8001298:	d1f2      	bne.n	8001280 <SPI_WaitFifoStateUntilTimeout+0xe>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800129a:	7b13      	ldrb	r3, [r2, #12]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f88d 3007 	strb.w	r3, [sp, #7]
      UNUSED(tmpreg);
 80012a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80012a6:	e7eb      	b.n	8001280 <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80012a8:	b12e      	cbz	r6, 80012b6 <SPI_WaitFifoStateUntilTimeout+0x44>
 80012aa:	f7ff fa2f 	bl	800070c <HAL_GetTick>
 80012ae:	9b08      	ldr	r3, [sp, #32]
 80012b0:	1ac0      	subs	r0, r0, r3
 80012b2:	4286      	cmp	r6, r0
 80012b4:	d8e7      	bhi.n	8001286 <SPI_WaitFifoStateUntilTimeout+0x14>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	6853      	ldr	r3, [r2, #4]
 80012ba:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80012be:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80012c6:	d00b      	beq.n	80012e0 <SPI_WaitFifoStateUntilTimeout+0x6e>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80012c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012ce:	d014      	beq.n	80012fa <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80012d0:	2301      	movs	r3, #1
 80012d2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80012d6:	2300      	movs	r3, #0
 80012d8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 80012dc:	2003      	movs	r0, #3
 80012de:	e018      	b.n	8001312 <SPI_WaitFifoStateUntilTimeout+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012e6:	d002      	beq.n	80012ee <SPI_WaitFifoStateUntilTimeout+0x7c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80012e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ec:	d1ec      	bne.n	80012c8 <SPI_WaitFifoStateUntilTimeout+0x56>
          __HAL_SPI_DISABLE(hspi);
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	6813      	ldr	r3, [r2, #0]
 80012f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	e7e6      	b.n	80012c8 <SPI_WaitFifoStateUntilTimeout+0x56>
          SPI_RESET_CRC(hspi);
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	6813      	ldr	r3, [r2, #0]
 80012fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	6813      	ldr	r3, [r2, #0]
 8001308:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	e7df      	b.n	80012d0 <SPI_WaitFifoStateUntilTimeout+0x5e>
      }
    }
  }

  return HAL_OK;
 8001310:	2000      	movs	r0, #0
}
 8001312:	b003      	add	sp, #12
 8001314:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001316 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001316:	b570      	push	{r4, r5, r6, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	4604      	mov	r4, r0
 800131c:	460d      	mov	r5, r1
 800131e:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001320:	9200      	str	r2, [sp, #0]
 8001322:	460b      	mov	r3, r1
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800132a:	f7ff ffa2 	bl	8001272 <SPI_WaitFifoStateUntilTimeout>
 800132e:	b138      	cbz	r0, 8001340 <SPI_EndRxTxTransaction+0x2a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001330:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001332:	f043 0320 	orr.w	r3, r3, #32
 8001336:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 800133a:	4618      	mov	r0, r3
 800133c:	b002      	add	sp, #8
 800133e:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001340:	9600      	str	r6, [sp, #0]
 8001342:	462b      	mov	r3, r5
 8001344:	2200      	movs	r2, #0
 8001346:	2180      	movs	r1, #128	; 0x80
 8001348:	4620      	mov	r0, r4
 800134a:	f7ff ff49 	bl	80011e0 <SPI_WaitFlagStateUntilTimeout>
 800134e:	b128      	cbz	r0, 800135c <SPI_EndRxTxTransaction+0x46>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001350:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001352:	f043 0320 	orr.w	r3, r3, #32
 8001356:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e7ee      	b.n	800133a <SPI_EndRxTxTransaction+0x24>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800135c:	9600      	str	r6, [sp, #0]
 800135e:	462b      	mov	r3, r5
 8001360:	2200      	movs	r2, #0
 8001362:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001366:	4620      	mov	r0, r4
 8001368:	f7ff ff83 	bl	8001272 <SPI_WaitFifoStateUntilTimeout>
 800136c:	4603      	mov	r3, r0
 800136e:	2800      	cmp	r0, #0
 8001370:	d0e3      	beq.n	800133a <SPI_EndRxTxTransaction+0x24>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001372:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001374:	f043 0320 	orr.w	r3, r3, #32
 8001378:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e7dd      	b.n	800133a <SPI_EndRxTxTransaction+0x24>

0800137e <HAL_SPI_Init>:
  if (hspi == NULL)
 800137e:	2800      	cmp	r0, #0
 8001380:	d058      	beq.n	8001434 <HAL_SPI_Init+0xb6>
{
 8001382:	b510      	push	{r4, lr}
 8001384:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800138a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800138e:	2b00      	cmp	r3, #0
 8001390:	d045      	beq.n	800141e <HAL_SPI_Init+0xa0>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001392:	2302      	movs	r3, #2
 8001394:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001398:	6822      	ldr	r2, [r4, #0]
 800139a:	6813      	ldr	r3, [r2, #0]
 800139c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013a0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80013a2:	68e3      	ldr	r3, [r4, #12]
 80013a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80013a8:	d93e      	bls.n	8001428 <HAL_SPI_Init+0xaa>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80013aa:	2100      	movs	r1, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80013ac:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80013b0:	d004      	beq.n	80013bc <HAL_SPI_Init+0x3e>
 80013b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80013b6:	d001      	beq.n	80013bc <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b8:	2200      	movs	r2, #0
 80013ba:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80013bc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80013be:	b922      	cbnz	r2, 80013ca <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80013c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80013c4:	d933      	bls.n	800142e <HAL_SPI_Init+0xb0>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80013c6:	2302      	movs	r3, #2
 80013c8:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80013ca:	6822      	ldr	r2, [r4, #0]
 80013cc:	6863      	ldr	r3, [r4, #4]
 80013ce:	68a0      	ldr	r0, [r4, #8]
 80013d0:	4303      	orrs	r3, r0
 80013d2:	6920      	ldr	r0, [r4, #16]
 80013d4:	4303      	orrs	r3, r0
 80013d6:	6960      	ldr	r0, [r4, #20]
 80013d8:	4303      	orrs	r3, r0
 80013da:	69a0      	ldr	r0, [r4, #24]
 80013dc:	f400 7000 	and.w	r0, r0, #512	; 0x200
 80013e0:	4303      	orrs	r3, r0
 80013e2:	69e0      	ldr	r0, [r4, #28]
 80013e4:	4303      	orrs	r3, r0
 80013e6:	6a20      	ldr	r0, [r4, #32]
 80013e8:	4303      	orrs	r3, r0
 80013ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80013ec:	4303      	orrs	r3, r0
 80013ee:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80013f0:	6822      	ldr	r2, [r4, #0]
 80013f2:	8b63      	ldrh	r3, [r4, #26]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80013fa:	4303      	orrs	r3, r0
 80013fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80013fe:	4303      	orrs	r3, r0
 8001400:	68e0      	ldr	r0, [r4, #12]
 8001402:	4303      	orrs	r3, r0
 8001404:	430b      	orrs	r3, r1
 8001406:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001408:	6822      	ldr	r2, [r4, #0]
 800140a:	69d3      	ldr	r3, [r2, #28]
 800140c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001410:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001412:	2000      	movs	r0, #0
 8001414:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001416:	2301      	movs	r3, #1
 8001418:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 800141c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800141e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8001422:	f7ff f8bb 	bl	800059c <HAL_SPI_MspInit>
 8001426:	e7b4      	b.n	8001392 <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142c:	e7be      	b.n	80013ac <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800142e:	2301      	movs	r3, #1
 8001430:	6323      	str	r3, [r4, #48]	; 0x30
 8001432:	e7ca      	b.n	80013ca <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8001434:	2001      	movs	r0, #1
 8001436:	4770      	bx	lr

08001438 <HAL_SPI_Transmit>:
{
 8001438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001440:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8001444:	2b01      	cmp	r3, #1
 8001446:	d103      	bne.n	8001450 <HAL_SPI_Transmit+0x18>
 8001448:	2002      	movs	r0, #2
}
 800144a:	b002      	add	sp, #8
 800144c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001450:	4604      	mov	r4, r0
 8001452:	460d      	mov	r5, r1
 8001454:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001456:	2301      	movs	r3, #1
 8001458:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800145c:	f7ff f956 	bl	800070c <HAL_GetTick>
 8001460:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001462:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b01      	cmp	r3, #1
 800146a:	d007      	beq.n	800147c <HAL_SPI_Transmit+0x44>
    errorcode = HAL_BUSY;
 800146c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800146e:	2301      	movs	r3, #1
 8001470:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001474:	2300      	movs	r3, #0
 8001476:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800147a:	e7e6      	b.n	800144a <HAL_SPI_Transmit+0x12>
  if ((pData == NULL) || (Size == 0U))
 800147c:	2d00      	cmp	r5, #0
 800147e:	f000 80b3 	beq.w	80015e8 <HAL_SPI_Transmit+0x1b0>
 8001482:	f1b8 0f00 	cmp.w	r8, #0
 8001486:	f000 80b1 	beq.w	80015ec <HAL_SPI_Transmit+0x1b4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800148a:	2303      	movs	r3, #3
 800148c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001490:	2300      	movs	r3, #0
 8001492:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001494:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001496:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800149a:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800149e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80014a0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80014a4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80014a8:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80014aa:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80014ac:	68a3      	ldr	r3, [r4, #8]
 80014ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014b2:	d01c      	beq.n	80014ee <HAL_SPI_Transmit+0xb6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80014bc:	d103      	bne.n	80014c6 <HAL_SPI_Transmit+0x8e>
    __HAL_SPI_ENABLE(hspi);
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014c4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80014c6:	68e3      	ldr	r3, [r4, #12]
 80014c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80014cc:	d931      	bls.n	8001532 <HAL_SPI_Transmit+0xfa>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80014ce:	6863      	ldr	r3, [r4, #4]
 80014d0:	b11b      	cbz	r3, 80014da <HAL_SPI_Transmit+0xa2>
 80014d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d119      	bne.n	800150e <HAL_SPI_Transmit+0xd6>
      hspi->Instance->DR = *((uint16_t *)pData);
 80014da:	6823      	ldr	r3, [r4, #0]
 80014dc:	f835 2b02 	ldrh.w	r2, [r5], #2
 80014e0:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80014e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	3b01      	subs	r3, #1
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80014ec:	e00f      	b.n	800150e <HAL_SPI_Transmit+0xd6>
    SPI_1LINE_TX(hspi);
 80014ee:	6822      	ldr	r2, [r4, #0]
 80014f0:	6813      	ldr	r3, [r2, #0]
 80014f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	e7dc      	b.n	80014b4 <HAL_SPI_Transmit+0x7c>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80014fa:	2e00      	cmp	r6, #0
 80014fc:	d078      	beq.n	80015f0 <HAL_SPI_Transmit+0x1b8>
 80014fe:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001502:	d004      	beq.n	800150e <HAL_SPI_Transmit+0xd6>
 8001504:	f7ff f902 	bl	800070c <HAL_GetTick>
 8001508:	1bc0      	subs	r0, r0, r7
 800150a:	4286      	cmp	r6, r0
 800150c:	d972      	bls.n	80015f4 <HAL_SPI_Transmit+0x1bc>
    while (hspi->TxXferCount > 0U)
 800150e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001510:	b29b      	uxth	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d053      	beq.n	80015be <HAL_SPI_Transmit+0x186>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001516:	6823      	ldr	r3, [r4, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	f012 0f02 	tst.w	r2, #2
 800151e:	d0ec      	beq.n	80014fa <HAL_SPI_Transmit+0xc2>
        hspi->Instance->DR = *((uint16_t *)pData);
 8001520:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001524:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001526:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001528:	b29b      	uxth	r3, r3
 800152a:	3b01      	subs	r3, #1
 800152c:	b29b      	uxth	r3, r3
 800152e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001530:	e7ed      	b.n	800150e <HAL_SPI_Transmit+0xd6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001532:	6863      	ldr	r3, [r4, #4]
 8001534:	b11b      	cbz	r3, 800153e <HAL_SPI_Transmit+0x106>
 8001536:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001538:	b29b      	uxth	r3, r3
 800153a:	2b01      	cmp	r3, #1
 800153c:	d12a      	bne.n	8001594 <HAL_SPI_Transmit+0x15c>
      if (hspi->TxXferCount > 1U)
 800153e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001540:	b29b      	uxth	r3, r3
 8001542:	2b01      	cmp	r3, #1
 8001544:	d909      	bls.n	800155a <HAL_SPI_Transmit+0x122>
        hspi->Instance->DR = *((uint16_t *)pData);
 8001546:	6823      	ldr	r3, [r4, #0]
 8001548:	f835 2b02 	ldrh.w	r2, [r5], #2
 800154c:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800154e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001550:	b29b      	uxth	r3, r3
 8001552:	3b02      	subs	r3, #2
 8001554:	b29b      	uxth	r3, r3
 8001556:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001558:	e01c      	b.n	8001594 <HAL_SPI_Transmit+0x15c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800155a:	6823      	ldr	r3, [r4, #0]
 800155c:	782a      	ldrb	r2, [r5, #0]
 800155e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001560:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001562:	b29b      	uxth	r3, r3
 8001564:	3b01      	subs	r3, #1
 8001566:	b29b      	uxth	r3, r3
 8001568:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800156a:	3501      	adds	r5, #1
 800156c:	e012      	b.n	8001594 <HAL_SPI_Transmit+0x15c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800156e:	782a      	ldrb	r2, [r5, #0]
 8001570:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8001572:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001574:	b29b      	uxth	r3, r3
 8001576:	3b01      	subs	r3, #1
 8001578:	b29b      	uxth	r3, r3
 800157a:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800157c:	3501      	adds	r5, #1
 800157e:	e009      	b.n	8001594 <HAL_SPI_Transmit+0x15c>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001580:	2e00      	cmp	r6, #0
 8001582:	d039      	beq.n	80015f8 <HAL_SPI_Transmit+0x1c0>
 8001584:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001588:	d004      	beq.n	8001594 <HAL_SPI_Transmit+0x15c>
 800158a:	f7ff f8bf 	bl	800070c <HAL_GetTick>
 800158e:	1bc0      	subs	r0, r0, r7
 8001590:	4286      	cmp	r6, r0
 8001592:	d933      	bls.n	80015fc <HAL_SPI_Transmit+0x1c4>
    while (hspi->TxXferCount > 0U)
 8001594:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001596:	b29b      	uxth	r3, r3
 8001598:	b18b      	cbz	r3, 80015be <HAL_SPI_Transmit+0x186>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	f012 0f02 	tst.w	r2, #2
 80015a2:	d0ed      	beq.n	8001580 <HAL_SPI_Transmit+0x148>
        if (hspi->TxXferCount > 1U)
 80015a4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80015a6:	b292      	uxth	r2, r2
 80015a8:	2a01      	cmp	r2, #1
 80015aa:	d9e0      	bls.n	800156e <HAL_SPI_Transmit+0x136>
          hspi->Instance->DR = *((uint16_t *)pData);
 80015ac:	f835 2b02 	ldrh.w	r2, [r5], #2
 80015b0:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 80015b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	3b02      	subs	r3, #2
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80015bc:	e7ea      	b.n	8001594 <HAL_SPI_Transmit+0x15c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80015be:	463a      	mov	r2, r7
 80015c0:	4631      	mov	r1, r6
 80015c2:	4620      	mov	r0, r4
 80015c4:	f7ff fea7 	bl	8001316 <SPI_EndRxTxTransaction>
 80015c8:	b108      	cbz	r0, 80015ce <HAL_SPI_Transmit+0x196>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80015ca:	2320      	movs	r3, #32
 80015cc:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80015ce:	68a3      	ldr	r3, [r4, #8]
 80015d0:	b933      	cbnz	r3, 80015e0 <HAL_SPI_Transmit+0x1a8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	6823      	ldr	r3, [r4, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	9201      	str	r2, [sp, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80015e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80015e2:	b96b      	cbnz	r3, 8001600 <HAL_SPI_Transmit+0x1c8>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80015e4:	2000      	movs	r0, #0
 80015e6:	e742      	b.n	800146e <HAL_SPI_Transmit+0x36>
    errorcode = HAL_ERROR;
 80015e8:	2001      	movs	r0, #1
 80015ea:	e740      	b.n	800146e <HAL_SPI_Transmit+0x36>
 80015ec:	2001      	movs	r0, #1
 80015ee:	e73e      	b.n	800146e <HAL_SPI_Transmit+0x36>
          errorcode = HAL_TIMEOUT;
 80015f0:	2003      	movs	r0, #3
 80015f2:	e73c      	b.n	800146e <HAL_SPI_Transmit+0x36>
 80015f4:	2003      	movs	r0, #3
 80015f6:	e73a      	b.n	800146e <HAL_SPI_Transmit+0x36>
          errorcode = HAL_TIMEOUT;
 80015f8:	2003      	movs	r0, #3
 80015fa:	e738      	b.n	800146e <HAL_SPI_Transmit+0x36>
 80015fc:	2003      	movs	r0, #3
 80015fe:	e736      	b.n	800146e <HAL_SPI_Transmit+0x36>
    errorcode = HAL_ERROR;
 8001600:	2001      	movs	r0, #1
 8001602:	e734      	b.n	800146e <HAL_SPI_Transmit+0x36>

08001604 <__libc_init_array>:
 8001604:	b570      	push	{r4, r5, r6, lr}
 8001606:	4e0d      	ldr	r6, [pc, #52]	; (800163c <__libc_init_array+0x38>)
 8001608:	4c0d      	ldr	r4, [pc, #52]	; (8001640 <__libc_init_array+0x3c>)
 800160a:	1ba4      	subs	r4, r4, r6
 800160c:	10a4      	asrs	r4, r4, #2
 800160e:	2500      	movs	r5, #0
 8001610:	42a5      	cmp	r5, r4
 8001612:	d109      	bne.n	8001628 <__libc_init_array+0x24>
 8001614:	4e0b      	ldr	r6, [pc, #44]	; (8001644 <__libc_init_array+0x40>)
 8001616:	4c0c      	ldr	r4, [pc, #48]	; (8001648 <__libc_init_array+0x44>)
 8001618:	f000 f820 	bl	800165c <_init>
 800161c:	1ba4      	subs	r4, r4, r6
 800161e:	10a4      	asrs	r4, r4, #2
 8001620:	2500      	movs	r5, #0
 8001622:	42a5      	cmp	r5, r4
 8001624:	d105      	bne.n	8001632 <__libc_init_array+0x2e>
 8001626:	bd70      	pop	{r4, r5, r6, pc}
 8001628:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800162c:	4798      	blx	r3
 800162e:	3501      	adds	r5, #1
 8001630:	e7ee      	b.n	8001610 <__libc_init_array+0xc>
 8001632:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001636:	4798      	blx	r3
 8001638:	3501      	adds	r5, #1
 800163a:	e7f2      	b.n	8001622 <__libc_init_array+0x1e>
 800163c:	080016ac 	.word	0x080016ac
 8001640:	080016ac 	.word	0x080016ac
 8001644:	080016ac 	.word	0x080016ac
 8001648:	080016b0 	.word	0x080016b0

0800164c <memset>:
 800164c:	4402      	add	r2, r0
 800164e:	4603      	mov	r3, r0
 8001650:	4293      	cmp	r3, r2
 8001652:	d100      	bne.n	8001656 <memset+0xa>
 8001654:	4770      	bx	lr
 8001656:	f803 1b01 	strb.w	r1, [r3], #1
 800165a:	e7f9      	b.n	8001650 <memset+0x4>

0800165c <_init>:
 800165c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800165e:	bf00      	nop
 8001660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001662:	bc08      	pop	{r3}
 8001664:	469e      	mov	lr, r3
 8001666:	4770      	bx	lr

08001668 <_fini>:
 8001668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800166a:	bf00      	nop
 800166c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800166e:	bc08      	pop	{r3}
 8001670:	469e      	mov	lr, r3
 8001672:	4770      	bx	lr
